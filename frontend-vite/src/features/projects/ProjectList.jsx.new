import React from 'react';
import { Link as RouterLink } from 'react-router-dom';
import {
  Box, Card, CardContent, CardHeader, Chip, Divider, Grid,
  Typography, useTheme, Avatar, Paper, Skeleton
} from '@mui/material';
import {
  Work as ProjectIcon, 
  Person as ManagerIcon, 
  CalendarToday as CalendarIcon,
  CheckCircle as ActiveIcon, 
  PauseCircleFilled as PausedIcon,
  CheckCircleOutline as CompletedIcon
} from '@mui/icons-material';
import { format, parseISO } from 'date-fns';

const ProjectList = ({ projects = [], loading = false, error = null }) => {
  const theme = useTheme();

  // Get status icon based on project status
  const getStatusIcon = (status) => {
    switch (status) {
      case 'active':
        return <ActiveIcon color="success" sx={{ fontSize: 16, mr: 0.5 }} />;
      case 'paused':
        return <PausedIcon color="warning" sx={{ fontSize: 16, mr: 0.5 }} />;
      case 'completed':
        return <CompletedIcon color="action" sx={{ fontSize: 16, mr: 0.5 }} />;
      default:
        return null;
    }
  };

  // Get status color
  const getStatusColor = (status) => {
    switch (status) {
      case 'active':
        return 'success';
      case 'paused':
        return 'warning';
      case 'completed':
        return 'default';
      default:
        return 'default';
    }
  };

  // Show loading skeleton
  if (loading) {
    return (
      <Grid container spacing={3}>
        {[1, 2, 3].map((item) => (
          <Grid item xs={12} sm={6} md={4} key={item}>
            <Card>
              <CardHeader
                avatar={
                  <Skeleton variant="circular" width={40} height={40} />
                }
                title={
                  <Skeleton width="80%" height={24} />
                }
                subheader={
                  <Skeleton width="40%" height={20} />
                }
              />
              <CardContent>
                <Skeleton width="100%" height={60} />
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    );
  }

  // Show error message
  if (error) {
    return (
      <Paper sx={{ p: 3, textAlign: 'center' }}>
        <Typography color="error">
          Error loading projects: {error}
        </Typography>
      </Paper>
    );
  }

  // Show empty state
  if (projects.length === 0) {
    return (
      <Paper sx={{ p: 3, textAlign: 'center' }}>
        <Typography variant="h6" color="textSecondary">
          No projects found
        </Typography>
        <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
          Create a new project to get started
        </Typography>
      </Paper>
    );
  }

  return (
    <Box>
      <Grid container spacing={3}>
        {projects.map((project) => (
          <Grid item xs={12} sm={6} md={4} key={project.id}>
            <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
              <CardHeader
                avatar={
                  <Avatar sx={{ bgcolor: theme.palette.primary.main }}>
                    <ProjectIcon />
                  </Avatar>
                }
                title={
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    {getStatusIcon(project.status)}
                    <Typography variant="subtitle1" component="span" noWrap>
                      {project.name}
                    </Typography>
                  </Box>
                }
                subheader={
                  <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
                    <Chip
                      label={project.status}
                      size="small"
                      color={getStatusColor(project.status)}
                      variant="outlined"
                      sx={{ textTransform: 'capitalize', height: 22, fontSize: '0.7rem' }}
                    />
                    {project.client && (
                      <Chip
                        label={project.client}
                        size="small"
                        variant="outlined"
                        sx={{ ml: 1, height: 22, fontSize: '0.7rem' }}
                      />
                    )}
                  </Box>
                }
              />
              <Divider />
              <CardContent sx={{ flexGrow: 1, pb: '16px !important' }}>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  {project.description || 'No description provided'}
                </Typography>
                
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 'auto' }}>
                  {project.manager && (
                    <Chip
                      icon={<ManagerIcon fontSize="small" />}
                      label={project.manager.name || 'Unassigned'}
                      size="small"
                      variant="outlined"
                    />
                  )}
                  
                  {project.startDate && (
                    <Chip
                      icon={<CalendarIcon fontSize="small" />}
                      label={format(parseISO(project.startDate), 'MMM d, yyyy')}
                      size="small"
                      variant="outlined"
                    />
                  )}
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  );
};

export default ProjectList;
